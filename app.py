import streamlit as st
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
from catboost import CatBoostClassifier
from PIL import Image

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
@st.cache_resource
def load_models():
    models = {}
    model_files = {
        'k-Nearest Neighbors': 'kNN_model_1.pkl',
        'Gradient Boosting': 'gb_model_2.pkl',
        'CatBoost': 'catboost_model_3.cbm',
        'Bagging': 'bagging_model_4.pkl',
        'Stacking': 'stacking_model_5.pkl'
    }
    
    for name, file in model_files.items():
        try:
            if name == 'CatBoost':
                models[name] = CatBoostClassifier().load_model(file)
            else:
                with open(file, 'rb') as f:
                    models[name] = pickle.load(f)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {name}: {str(e)}")
            st.warning(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª {file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
    
    return models

models = load_models()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    return pd.read_csv('smoke_detector_task_cleaned2.csv')

data = load_data()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
                        ["–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ", "–û –¥–∞–Ω–Ω—ã—Ö", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"])

if page == "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ":
    st.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ")
    col1, col2 = st.columns(2)

    with col1:
        st.header("–§–ò–û: –ù–µ—Å—Ç–µ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞")
        st.subheader("–ù–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã: –§–ò–¢-232")
        st.write("–¢–µ–º–∞ –†–ì–†: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –¥—ã–º–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∂–∞—Ä–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏")

    with col2:
        try:
            image = Image.open('developer_photo.jpg')
            st.image(image, caption='–§–æ—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', width=200)
        except:
            st.warning("–§–æ—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

elif page == "–û –¥–∞–Ω–Ω—ã—Ö":
    st.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö")

    st.header("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
    st.write("""
    –î–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –¥–∞—Ç—á–∏–∫–æ–≤, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã
    –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤. –í–∫–ª—é—á–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–ª–∞–∂–Ω–æ—Å—Ç–∏,
    –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≥–∞–∑–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """)

    st.header("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    st.write("""
    - Temperature[C]: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è
    - Humidity[%]: –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    - TVOC[ppb]: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ª–µ—Ç—É—á–∏—Ö –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    - eCO2[ppm]: –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO2
    - Raw H2: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–æ—Ä–æ–¥–∞
    - Raw Ethanol: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —ç—Ç–∞–Ω–æ–ª–∞
    - Pressure[hPa]: –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    - PM1.0, PM2.5: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü
    - NC0.5, NC1.0, NC2.5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
    - CNT: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
    - Fire Alarm: –ü–æ–∂–∞—Ä–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞ (—Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
    """)

    st.header("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    st.write("""
    - –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    """)

elif page == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏":
    st.title("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö")

    st.header("1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–µ–≤ –ø–æ–∂–∞—Ä–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏")
    fig1, ax1 = plt.subplots()
    data['Fire Alarm'].value_counts().plot(kind='pie', autopct='%1.1f%%', ax=ax1)
    ax1.set_ylabel("")
    st.pyplot(fig1)

    st.header("2. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç—Ä–µ–≤–æ–≥–∏ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    fig2, ax2 = plt.subplots()
    sns.boxplot(x='Fire Alarm', y='Temperature[C]', data=data, ax=ax2)
    st.pyplot(fig2)

    st.header("3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    fig3, ax3 = plt.subplots(figsize=(10, 8))
    sns.heatmap(data.corr(), annot=True, fmt=".1f", cmap="coolwarm", ax=ax3)
    st.pyplot(fig3)

    st.header("4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ CO2")
    fig4, ax4 = plt.subplots()
    sns.histplot(data['eCO2[ppm]'], bins=30, kde=True, ax=ax4)
    ax4.set_xlabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO2 [ppm]")
    st.pyplot(fig4)

elif page == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.title("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∂–∞—Ä–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏")

    model_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
                              list(models.keys()))

    st.header("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞—Ç—á–∏–∫–æ–≤")

    col1, col2 = st.columns(2)

    with col1:
        temperature = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ [¬∞C]", value=25.0, min_value=-50.0, max_value=100.0)
        humidity = st.number_input("–í–ª–∞–∂–Ω–æ—Å—Ç—å [%]", value=50.0, min_value=0.0, max_value=100.0)
        tvoc = st.number_input("TVOC [ppb]", value=500.0, min_value=0.0)
        eco2 = st.number_input("eCO2 [ppm]", value=400.0, min_value=0.0)
        h2 = st.number_input("Raw H2", value=13000.0, min_value=0.0)
        ethanol = st.number_input("Raw Ethanol", value=20000.0, min_value=0.0)
        pressure = st.number_input("–î–∞–≤–ª–µ–Ω–∏–µ [hPa]", value=1013.0, min_value=800.0, max_value=1200.0)

    with col2:
        pm10 = st.number_input("PM1.0", value=10.0, min_value=0.0, max_value=500.0)
        pm25 = st.number_input("PM2.5", value=10.0)
        nc05 = st.number_input("NC0.5", value=1000.0, min_value=0.0)
        nc10 = st.number_input("NC1.0", value=800.0, min_value=0.0)
        nc25 = st.number_input("NC2.5", value=500.0, min_value=0.0)
        cnt = st.number_input("CNT", value=3000.0, min_value=0.0)

    input_data = pd.DataFrame([[temperature, humidity, tvoc, eco2, h2, ethanol, pressure, 
                              pm10, pm25, nc05, nc10, nc25, cnt]],
                            columns=['Temperature[C]', 'Humidity[%]', 'TVOC[ppb]', 
                                    'eCO2[ppm]', 'Raw H2', 'Raw Ethanol', 'Pressure[hPa]',
                                    'PM1.0', 'PM2.5', 'NC0.5', 'NC1.0', 'NC2.5', 'CNT'])

    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∂–∞—Ä–∞"):
        model = models[model_choice]
        
        if model_choice == 'CatBoost':
            prediction_proba  = model.predict_proba(input_data)[0][1]
            prediction_class = model.predict(input_data)[0]
        else:
            prediction_proba  = model.predict_proba(input_data)[0][1] if hasattr(model, "predict_proba") else model.predict(input_data)[0]
            prediction_class = model.predict(input_data)[0] if not hasattr(model, "predict_proba") else (1 if prediction_proba > 0.5 else 0)

        probability = prediction_proba  * 100
        
        if probability > 50:
            st.error(f"üö® –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –ü–û–ñ–ê–†–ê: {probability:.1f}%")
            st.warning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!")
        else:
            st.success(f"‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∂–∞—Ä–∞: {probability:.1f}%")
            st.info("–°–∏—Ç—É–∞—Ü–∏—è –≤ –Ω–æ—Ä–º–µ")

        # –ü–æ–∫–∞–∂–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
        similar_cases = data[
            (data['Temperature[C]'].between(temperature-5, temperature+5)) &
            (data['Humidity[%]'].between(humidity-10, humidity+10)) &
            (data['eCO2[ppm]'].between(eco2-100, eco2+100)) &
            (data['Fire Alarm'] == prediction_class)
        ]
        
        if not similar_cases.empty:
            st.dataframe(similar_cases[['Temperature[C]', 'Humidity[%]', 'eCO2[ppm]', 'Fire Alarm']].head(10))
        else:
            st.warning("–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤")